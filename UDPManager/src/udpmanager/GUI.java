/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package udpmanager;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author asaad
 */


public class GUI extends javax.swing.JFrame  implements UDPListenerManagerInterface, BridgeUDP_TCP{

    
    UDPListenerManager uDPListenerManager;
    MulticastManager multicastManager;
    TCPServer tCPServer;
    
    ArrayList<byte[]> fragmentos; 
    
    int sizeDatagram;
    
    byte[] prueba = null;
    
    ArrayList<byte[]> fragmentosRecibidos;
    String nameFileRecived;
    boolean comenzarFragmentos;
    int totalSizeFile;
    int contFragmentos;
    int maxFragmentos;
    int theLast;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        nameFileRecived = "Default";
        fragmentos = new  ArrayList<byte[]> ();
        fragmentosRecibidos = new  ArrayList<byte[]> ();
        comenzarFragmentos = false;
        totalSizeFile = 0;
        contFragmentos = 0;
        maxFragmentos = 0;
        theLast = 0;
        sizeDatagram = 4096;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField4 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setText("172.17.9.255");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("9090");

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField4.setText("9090");

        jButton2.setText("Start List.");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Multicast Enabled");

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(56, 56, 56)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(69, 69, 69)
                                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3)
                        .addGap(4, 4, 4)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jCheckBox1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.out.println("entro");
        tCPServer = new TCPServer(this);
        if(!this.jCheckBox1.isSelected()){
            this.uDPListenerManager=
                new UDPListenerManager(
                        this, Integer.
                                parseInt(this.
                                        jTextField4.getText()));
        }else{
            
                this.multicastManager=new MulticastManager(this.jTextField1.getText(), 
                        Integer.
                                    parseInt(this.jTextField4.getText()), this);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /*if(!this.jCheckBox1.isSelected()){
            this.uDPListenerManager.
                sendMessage(this.jTextField1.getText(),
                        Integer.parseInt(this.jTextField2.
                                getText()), this.jTextField3.
                                        getText());
        }else{
           
        }*/
        
        JFileChooser fc = new JFileChooser();
        int op = fc.showOpenDialog(this);
        if (op == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            fragmentador(file);
            for (int i = 0; i < fragmentos.size(); i++) {
                this.uDPListenerManager.sendMessage(this.jTextField1.getText(),
                        Integer.parseInt(this.jTextField2.
                                getText()),fragmentos.get(i)); 
                try {
                    Thread.sleep(0, 10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                //System.out.println(i);
            }
            fragmentos = new  ArrayList<byte[]> ();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
       
        JFileChooser fc = new JFileChooser();
        int op = fc.showOpenDialog(this);
        if (op == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            fragmentador(file); 
            for (int i = 0; i < fragmentos.size(); i++) {             
                this.multicastManager.sendMessage(this.jTextField1.getText(),
                        Integer.parseInt(this.jTextField2.
                                getText()),fragmentos.get(i));     
                try {
                    Thread.sleep(0, 10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        fragmentos = new  ArrayList<byte[]> ();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void DatagramPacketReceived(String sourceHost, int sourcePort, byte[] payload) {
       
        /*File dest = new File("8.jpg");
        try {
            Files.write(dest.toPath(), payload);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }*/     
       if (comenzarFragmentos) {
            if (this.contFragmentos < this.maxFragmentos) {
                this.fragmentosRecibidos.add(payload);
                this.contFragmentos++;
                System.out.println(this.contFragmentos+"-"+this.maxFragmentos);
            }
            if(this.contFragmentos == this.maxFragmentos){
                this.comenzarFragmentos = false;
                this.contFragmentos = 0;
                byte[] b =armador();
                File dest = new File(this.nameFileRecived);
                try {
                    Files.write(dest.toPath(), b);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                fragmentosRecibidos = new  ArrayList<byte[]> ();
                AddLista(nameFileRecived);
                System.out.println("finalizo");
            }
        }else{
           String firstDatagram = new String(payload);
            if (firstDatagram.substring(0, 2).equals("P1")) {
                String[] config = firstDatagram.split("-");
                this.nameFileRecived = config[1];
                this.totalSizeFile = Integer.parseInt(config[2]);
                this.maxFragmentos = Integer.parseInt(config[3]);
                this.theLast = Integer.parseInt(config[4]);
                this.comenzarFragmentos = true;
            }
        }
        
        /*this.jTextArea1.insert("sourceHost: "+
                sourceHost+"/ sourcePort: "+
                sourcePort +" / Payload: "+
                ( new String(payload))+"\n",0);*/
    }

    
    
    @Override
    public void ErrorHasBeenThrown(Exception error) {
        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, error);
    }
    
    public void fragmentador(File file) {
        byte[] filecontent = null;
        try {
            filecontent = Files.readAllBytes(file.toPath());
            prueba = filecontent;
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        int numeroFragmentosArchivo = 1;
        final int sizeFile  = filecontent.length; 
        if (sizeFile > sizeDatagram) {
            numeroFragmentosArchivo += (int) (sizeFile)/sizeDatagram;
        } 
        int sizeLast =  sizeFile - ((numeroFragmentosArchivo - 1) * sizeDatagram);
        byte[] Primerdatagram = ("P1-"+file.getName()+"-"+sizeFile+"-"+numeroFragmentosArchivo+"-" + sizeLast+"-").getBytes();
        fragmentos.add(Primerdatagram );
        int cont = 0;
        byte[] b;
        for (int i = 0; i < numeroFragmentosArchivo; i++) {
            if(cont < sizeFile){  
                int verificarsobrante = sizeFile-cont;
                if ( verificarsobrante > sizeDatagram) {
                    b = new byte[sizeDatagram];    
                    System.arraycopy(filecontent, cont, b, 0, sizeDatagram);
                }else{
                    b = new byte[verificarsobrante];
                    System.arraycopy(filecontent, cont, b, 0, verificarsobrante);
                }
                fragmentos.add(b);
                cont += sizeDatagram;
            }    
        }
    }    
    
    public byte[] armador(){
        int cont = 0;
        byte[] b = new byte[this.totalSizeFile];
        for (int i = 0; i < this.maxFragmentos; i++) {
            if (i == this.maxFragmentos - 1) {
                 System.arraycopy(this.fragmentosRecibidos.get(i), 0, b, cont, this.theLast);
            }else{
                 System.arraycopy(this.fragmentosRecibidos.get(i), 0, b, cont, sizeDatagram);
            }           
            cont += sizeDatagram;       
        }
        return b;
    }

    @Override
    public void Bridge(String nameFile) {
       
        File file = new File(nameFile); 
        fragmentador(file);

            for (int i = 0; i < fragmentos.size(); i++) {             
                this.multicastManager.sendMessage(this.jTextField1.getText(),
                        Integer.parseInt(this.jTextField2.
                                getText()),fragmentos.get(i));     
                try {
                    Thread.sleep(0, 10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            fragmentos = new  ArrayList<byte[]>();
        file.delete();
        fragmentos = new  ArrayList<byte[]> ();
    }
    
    public void AddLista(String nombreArchivo){
        //Lectura
      File archivo = null;
      FileReader fr = null;
      BufferedReader br = null;
      //escritura
      FileWriter fichero = null;
      PrintWriter pw = null;
      //Donde se guardan los datos
      ArrayList datos = new ArrayList<>();
      
      //Dato a guardar
      String datoadd = nombreArchivo;
      

      try {
         // Apertura del fichero y creacion de BufferedReader para poder
         // hacer una lectura comoda (disponer del metodo readLine()).
         archivo = new File ("lista.txt");
         fr = new FileReader (archivo);
         br = new BufferedReader(fr);

         // Lectura del fichero
         String linea;
         while((linea=br.readLine())!=null)
            //System.out.println(linea);
             datos.add(linea);
      }
      catch(Exception e){
         e.printStackTrace();
      }finally{
         // En el finally cerramos el fichero, para asegurarnos
         // que se cierra tanto si todo va bien como si salta 
         // una excepcion.
         try{                    
            if( null != fr ){   
               fr.close();     
            }                  
         }catch (Exception e2){ 
            e2.printStackTrace();
         }
      }
      //Escritura
        try
        {
            fichero = new FileWriter("lista.txt");
            pw = new PrintWriter(fichero);

            for (int i = 0; i < datos.size(); i++){
                pw.println(datos.get(i));
            }
            pw.println(datoadd);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }
      
    }
    
}
